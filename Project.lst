Microsoft (R) Macro Assembler Version 14.29.30147.0	    06/01/23 14:00:09
MASM Calculat						     Page 1 - 1


				TITLE MASM Calculate

				; Author: Amine Kaddour-Djebbar
				; Last Modified: 03/17/2023
				; Email address: kaddoura@oregonstate.edu
				; Description: This file is a MASM program that recieves valid signed numbers from the user, and returns the numbers
				;		entered, a sum of these numbers, and the truncated average of all of these numbers.  The program achieves this
				;		by using two macros, one that retrieves a string of numbers from the user, and one that displays the string of numbers to
				;		the user.  The program first introduces itself, gives instruction to the user to provide a valid amount of signed
				;		numbers, converts the string input to integers and saves them, retrieves these integers and turns them into strings
				;		to display to the user.  The program then calculates the sum and average and returns it to the user using the macro.


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; Constants
 = 0000000A			AMOUNT_OF_NUMS = 10

 00000000			.data
				; Project data

					; string prompts
 00000000 57 72 69 74 74		myName					BYTE	"Written by: Amine Kaddour", 13,10,13,10, 0	
	   65 6E 20 62 79
	   3A 20 41 6D 69
	   6E 65 20 4B 61
	   64 64 6F 75 72
	   0D 0A 0D 0A 00
 0000001E 4D 41 53 4D 20		programTitle			BYTE	"MASM Calculate: Designing low-level I/O procedures",13,10, 0		
	   43 61 6C 63 75
	   6C 61 74 65 3A
	   20 44 65 73 69
	   67 6E 69 6E 67
	   20 6C 6F 77 2D
	   6C 65 76 65 6C
	   20 49 2F 4F 20
	   70 72 6F 63 65
	   64 75 72 65 73
	   0D 0A 00
 00000053 50 6C 65 61 73		intro_1_one				BYTE	"Please provide ",0 
	   65 20 70 72 6F
	   76 69 64 65 20
	   00
 00000063 20 73 69 67 6E		intro_1_two				BYTE	" signed decimal integers.",13,10,0	
	   65 64 20 64 65
	   63 69 6D 61 6C
	   20 69 6E 74 65
	   67 65 72 73 2E
	   0D 0A 00
 0000007F 45 61 63 68 20		intro_2					BYTE	"Each number needs to be small enough to fit inside a 32 bit register.  After you have finis",13,10 ,"hed inputting the raw numbers I will display a list of the integers, their sum, and their" ,13,10, "average value.",0	
	   6E 75 6D 62 65
	   72 20 6E 65 65
	   64 73 20 74 6F
	   20 62 65 20 73
	   6D 61 6C 6C 20
	   65 6E 6F 75 67
	   68 20 74 6F 20
	   66 69 74 20 69
	   6E 73 69 64 65
	   20 61 20 33 32
	   20 62 69 74 20
	   72 65 67 69 73
	   74 65 72 2E 20
	   20 41 66 74 65
	   72 20 79 6F 75
	   20 68 61 76 65
	   20 66 69 6E 69
	   73 0D 0A 68 65
	   64 20 69 6E 70
	   75 74 74 69 6E
	   67 20 74 68 65
	   20 72 61 77 20
	   6E 75 6D 62 65
	   72 73 20 49 20
	   77 69 6C 6C 20
	   64 69 73 70 6C
	   61 79 20 61 20
	   6C 69 73 74 20
	   6F 66 20 74 68
	   65 20 69 6E 74
	   65 67 65 72 73
	   2C 20 74 68 65
	   69 72 20 73 75
	   6D 2C 20 61 6E
	   64 20 74 68 65
	   69 72 0D 0A 61
	   76 65 72 61 67
	   65 20 76 61 6C
	   75 65 2E 00
 00000146 50 6C 65 61 73		input_prompt			BYTE	"Please enter a signed number: ", 0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 6E 75 6D
	   62 65 72 3A 20
	   00
 00000165 45 52 52 4F 52		error_prompt			BYTE	"ERROR: You did not enter a signed number or your number was too large. Please try again ", 0
	   3A 20 59 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 65
	   6E 74 65 72 20
	   61 20 73 69 67
	   6E 65 64 20 6E
	   75 6D 62 65 72
	   20 6F 72 20 79
	   6F 75 72 20 6E
	   75 6D 62 65 72
	   20 77 61 73 20
	   74 6F 6F 20 6C
	   61 72 67 65 2E
	   20 50 6C 65 61
	   73 65 20 74 72
	   79 20 61 67 61
	   69 6E 20 00
 000001BE 59 6F 75 20 65		number_declaration		BYTE	"You entered the following numbers:", 0	
	   6E 74 65 72 65
	   64 20 74 68 65
	   20 66 6F 6C 6C
	   6F 77 69 6E 67
	   20 6E 75 6D 62
	   65 72 73 3A 00
 000001E1 54 68 65 20 73		sum_prompt				BYTE	"The sum of these numbers is: ", 0	
	   75 6D 20 6F 66
	   20 74 68 65 73
	   65 20 6E 75 6D
	   62 65 72 73 20
	   69 73 3A 20 00
 000001FF 54 68 65 20 74		avg_prompt				BYTE	"The truncated average is:  ", 0	
	   72 75 6E 63 61
	   74 65 64 20 61
	   76 65 72 61 67
	   65 20 69 73 3A
	   20 20 00
 0000021B 0D 0A 54 68 61		farewell_prompt			BYTE	13,10,"Thanks for playing!", 0	
	   6E 6B 73 20 66
	   6F 72 20 70 6C
	   61 79 69 6E 67
	   21 00
 00000231 2C 20 00			comma_space				BYTE	", ",0

					; Arrays
 00000234  00000015 [			numbersArray			SDWORD	21 DUP(?)		; number array
	    00000000
	   ]
 00000288  00000015 [			input_buffer			DWORD	21 DUP(?)		; input buffer
	    00000000
	   ]
 000002DC  00000015 [			number_string			BYTE	21 DUP(?)
	    00
	   ]
 000002F1 00000000			size_of_input			DWORD	?				; length of num input
 000002F5 00000000			number_int				SDWORD	?				; converted number
 000002F9 00000000			char_ascii				SDWORD	?	
 000002FD 00000000			sum_calculation			SDWORD	?



				;--------------------------------------------------------------------------------------------------------------------------------
				; Name: mGetString MACRO
				;
				; Description:	Macro used to display a prompt, then get the user's keyboard input and store it into a memory location.  It uses
				;		the mDisplayString macro to display the prompt, then use ReadString to recieve the information from the user.
				;
				; Preconditions:  Saves all registers, ReadString preconditions met
				;
				; Postconditions: Restores all registers
				;
				; Receives: memory OFFSETs:
				;                          [EBP+24] input_prompt,
				;                          [EBP+20] input_buffer,
				;                          [EBP+16] number_string,
				;                          [EBP+12] size_of_input
				;
				; Returns: Displays input prompt to user on the console, saves input string in number_string, and size into size_of_input
				;-------------------------------------------------------------------------------------------------------------------------------
				mGetString MACRO
					PUSHAD
					PUSH	ESI
					MOV		ESI, [EBP + 24]
					mDisplayString
					POP		ESI
					MOV		ECX, SIZEOF input_buffer
					MOV		EDX, [EBP + 20]		; buffer memory (stores the ReadString)
					CALL	ReadString
					MOV		EDI, [EBP + 12]
					MOV		[EDI], EAX		; length saved to memory
					MOV		EDI, [EBP + 16] ; memory of input
					MOV		[EDI], EDX
					POPAD
				ENDM


				;--------------------------------------------------------------------------------------------------------------------------------
				; Name: mDisplayString MACRO
				;
				; Description:	Macro used to display a string to the user
				;
				; Preconditions: ESI contains string to be displayed.  Saves all registers
				;
				; Postconditions: Restores all registers
				;
				; Receives: ESI points to displayed string
				;
				; Returns: Displays string to user on the console
				;-------------------------------------------------------------------------------------------------------------------------------
				mDisplayString MACRO
					PUSHAD
					MOV		EDX, ESI
					CALL	WriteString
					POPAD
				ENDM

 00000000			.code
 00000000			main PROC
					; Intorduction
 00000000  68 0000001E R		PUSH	OFFSET	programTitle
 00000005  68 00000000 R		PUSH	OFFSET	myName
 0000000A  68 00000053 R		PUSH	OFFSET	intro_1_one
 0000000F  68 00000063 R		PUSH	OFFSET	intro_1_two
 00000014  68 0000007F R		PUSH	OFFSET	intro_2
 00000019  E8 000000D5			CALL	introduction
					; Get number strings from user and save them as integers
 0000001E  68 00000234 R		PUSH	OFFSET  numbersArray
 00000023  68 000002F5 R		PUSH	OFFSET	number_int
 00000028  68 00000165 R		PUSH	OFFSET	error_prompt
 0000002D  68 00000146 R		PUSH	OFFSET	input_prompt
 00000032  68 00000288 R		PUSH	OFFSET	input_buffer
 00000037  68 000002DC R		PUSH	OFFSET	number_string
 0000003C  68 000002F1 R		PUSH	OFFSET	size_of_input
 00000041  8B 7C 24 18			MOV		EDI, [ESP + 24]	
 00000045  B9 0000000A			MOV		ECX, AMOUNT_OF_NUMS
 0000004A				get_10_numbers:
 0000004A  51					PUSH	ECX
 0000004B  E8 0000010B				CALL	ReadVal
 00000050  59					POP		ECX
 00000051  83 C7 04				ADD		EDI, TYPE numbersArray
 00000054  E2 F4				LOOP	get_10_numbers
 00000056  83 C4 1C				ADD		ESP, 28
					; Display integers as number strings
 00000059  68 00000231 R		PUSH	OFFSET	comma_space
 0000005E  68 000001BE R		PUSH	OFFSET	number_declaration
 00000063  68 000002F9 R		PUSH	OFFSET	char_ascii
 00000068  68 00000234 R		PUSH	OFFSET	numbersArray
 0000006D  68 000002DC R		PUSH	OFFSET	number_string
 00000072  B9 0000000A			MOV		ECX, AMOUNT_OF_NUMS
 00000077  E8 00000000 E		CALL	CrLf
 0000007C  8B 74 24 0C			MOV		ESI, [ESP + 12]
					mDisplayString
 00000080  60		     1		PUSHAD
 00000081  8B D6	     1		MOV		EDX, ESI
 00000083  E8 00000000 E     1		CALL	WriteString
 00000088  61		     1		POPAD
 00000089  E8 00000000 E		CALL	CrLf
 0000008E  8B 74 24 04			MOV		ESI, [ESP + 4]
 00000092  8B 3C 24			MOV		EDI, [ESP]
 00000095				write_10_numbers:
 00000095  51					PUSH	ECX
 00000096  56					PUSH	ESI
 00000097  E8 00000182				CALL	WriteVal
 0000009C  5E					POP		ESI
 0000009D  83 C6 04				ADD		ESI, 4
 000000A0  59					POP		ECX
 000000A1  83 F9 01				CMP		ECX, 1
 000000A4  74 11				JE		next_main
 000000A6  56					PUSH	ESI
 000000A7  8B 74 24 14				MOV		ESI, [ESP + 20]
						mDisplayString
 000000AB  60		     1		PUSHAD
 000000AC  8B D6	     1		MOV		EDX, ESI
 000000AE  E8 00000000 E     1		CALL	WriteString
 000000B3  61		     1		POPAD
 000000B4  5E					POP		ESI
 000000B5  E2 DE				LOOP	write_10_numbers
 000000B7				next_main:
 000000B7  E8 00000000 E			CALL	CrLf
 000000BC  83 C4 14				ADD		ESP, 20
					; Calculate and display Sum
 000000BF  68 000002FD R		PUSH	OFFSET sum_calculation
 000000C4  68 000001E1 R		PUSH	OFFSET sum_prompt
 000000C9  68 00000234 R		PUSH	OFFSET numbersArray
 000000CE  E8 000001C1			CALL	calculateSum
					; Calculate and display average
 000000D3  68 000001FF R		PUSH	OFFSET avg_prompt
 000000D8  68 000002FD R		PUSH	OFFSET sum_calculation
 000000DD  E8 00000205			CALL	calculateAvg
					; Conclude program
 000000E2  68 0000021B R		PUSH	OFFSET	farewell_prompt
 000000E7  E8 00000251			CALL	farewell

					Invoke ExitProcess,0	; exit to operating system
 000000EC  6A 00	   *	    push   +000000000h
 000000EE  E8 00000000 E   *	    call   ExitProcess
 000000F3			main ENDP


				;--------------------------------------------------------------------------------------------------------------------------------
				; Name: introduction
				;
				; Description:	Prints Title, Author Name, and a description of the program along with instructions.
				;
				; Preconditions: mDisplayString macro and WriteVal procedure to print strings to the console.
				;
				; Postconditions: Restores EAX
				;
				; Receives: memory OFFSETs:
				;                          [EBP+24] programTitle,
				;                          [EBP+20] myName,
				;                          [EBP+16] intro_1_one,
				;                          [EBP+12] intro_1_two,
				;                          [EBP+8] intro_2
				;
				; Returns: Prints statements to the console.
				;-------------------------------------------------------------------------------------------------------------------------------
 000000F3			introduction PROC
 000000F3  55				PUSH	EBP
 000000F4  8B EC			MOV		EBP, ESP
 000000F6  8B 75 18			MOV		ESI, [EBP + 24]
					mDisplayString
 000000F9  60		     1		PUSHAD
 000000FA  8B D6	     1		MOV		EDX, ESI
 000000FC  E8 00000000 E     1		CALL	WriteString
 00000101  61		     1		POPAD
 00000102  8B 75 14			MOV		ESI, [EBP + 20]
					mDisplayString
 00000105  60		     1		PUSHAD
 00000106  8B D6	     1		MOV		EDX, ESI
 00000108  E8 00000000 E     1		CALL	WriteString
 0000010D  61		     1		POPAD
 0000010E  8B 75 10			MOV		ESI, [EBP + 16]
					mDisplayString
 00000111  60		     1		PUSHAD
 00000112  8B D6	     1		MOV		EDX, ESI
 00000114  E8 00000000 E     1		CALL	WriteString
 00000119  61		     1		POPAD
					; converts AMOUNT_OF_NUMS to string and prints it
 0000011A  60				PUSHAD
 0000011B  6A 0A			PUSH	OFFSET	AMOUNT_OF_NUMS		; pointed to by ESI
 0000011D  68 000002DC R		PUSH	OFFSET	number_string	; pointed to by EDI
 00000122  8B 44 24 04			MOV		EAX, [ESP + 4]
 00000126  89 06			MOV		[ESI], EAX
 00000128  8B 3C 24			MOV		EDI, [ESP]
 0000012B  E8 000000EE			CALL	WriteVal		
 00000130  58				POP		EAX						; pops pushed EDI
 00000131  58				POP		EAX						; pops pushed ESI
 00000132  61				POPAD
					; continues introduction
 00000133  8B 75 0C			MOV		ESI, [EBP + 12]
					mDisplayString
 00000136  60		     1		PUSHAD
 00000137  8B D6	     1		MOV		EDX, ESI
 00000139  E8 00000000 E     1		CALL	WriteString
 0000013E  61		     1		POPAD
 0000013F  8B 75 08			MOV		ESI, [EBP + 8]
					mDisplayString
 00000142  60		     1		PUSHAD
 00000143  8B D6	     1		MOV		EDX, ESI
 00000145  E8 00000000 E     1		CALL	WriteString
 0000014A  61		     1		POPAD
 0000014B  E8 00000000 E		CALL	CrLf
 00000150  E8 00000000 E		CALL	CrLf
 00000155  33 C0			XOR		EAX, EAX
 00000157  5D				POP		EBP
 00000158  C2 0014			RET		20
 0000015B			introduction ENDP


				;--------------------------------------------------------------------------------------------------------------------------------
				; Name: ReadVal
				;
				; Description:	Invokes the mGetString macro to get user input in the form of a string of digits. It then converts the string
				;		of ascii digits to its numeric value representation while validating the user's input.  It then stores the value in 
				;		memory.  Validity handles negative, positive values, plus and minus signs, and overflow values.
				;
				; Preconditions: mGetString macro and all memory offsets needed, EDI points to numbers_Array
				;
				; Postconditions: Restores EAX, EBX, ECX, EDX
				;
				; Receives: EDI points to numbers_Array
				;			memory OFFSETs:
				;                          [EBP+32] number_int,
				;                          [EBP+28] error_prompt,
				;                          [EBP+24] input_prompt,
				;                          [EBP+20] input_buffer,
				;                          [EBP+16] number_string,
				;                          [EBP+12] size_of_input
				;
				; Returns: Assigns random integer values to all randArray indices.  Displays numbers and errors prompt to user on the console
				;-------------------------------------------------------------------------------------------------------------------------------
 0000015B			ReadVal PROC
 0000015B  55				PUSH	EBP
 0000015C  8B EC			MOV		EBP, ESP
					; gets user input string to start verification
 0000015E				_user_input:
						mGetString
 0000015E  60		     1		PUSHAD
 0000015F  56		     1		PUSH	ESI
 00000160  8B 75 18	     1		MOV		ESI, [EBP + 24]
 00000163  60		     2		PUSHAD
 00000164  8B D6	     2		MOV		EDX, ESI
 00000166  E8 00000000 E     2		CALL	WriteString
 0000016B  61		     2		POPAD
 0000016C  5E		     1		POP		ESI
 0000016D  B9 00000054	     1		MOV		ECX, SIZEOF input_buffer
 00000172  8B 55 14	     1		MOV		EDX, [EBP + 20]		; buffer memory (stores the ReadString)
 00000175  E8 00000000 E     1		CALL	ReadString
 0000017A  8B 7D 0C	     1		MOV		EDI, [EBP + 12]
 0000017D  89 07	     1		MOV		[EDI], EAX		; length saved to memory
 0000017F  8B 7D 10	     1		MOV		EDI, [EBP + 16] ; memory of input
 00000182  89 17	     1		MOV		[EDI], EDX
 00000184  61		     1		POPAD
 00000185  BA 00000054				MOV		EDX, 84					; SIZEOF numbersArray
 0000018A  8B 75 0C				MOV		ESI, [EBP + 12]
 0000018D  8B 0E				MOV		ECX, [ESI]
 0000018F  8B 75 10				MOV		ESI, [EBP + 16]
 00000192  2B F2				SUB		ESI, EDX				; ESI now contains string input
 00000194  BB 00000000				MOV		EBX, 0
 00000199  FC					CLD
						; test_string will test each byte in string input for validity until end of string
 0000019A					_test_string_of_positive_int:
 0000019A  51						PUSH	ECX
 0000019B  AC						LODSB
 0000019C  3C 2D					CMP		AL, 45				; tests minus sign
 0000019E  74 4C					JE		_handle_minus_sign
 000001A0  3C 2B					CMP		AL, 43				; tests plus sign
 000001A2  74 45					JE		_handle_plus_sign
 000001A4  3C 30					CMP		AL, 48				; tests low range of ascii number
 000001A6  7C 28					JL		_invalidNum
 000001A8  3C 39					CMP		AL, 57				; tests high range of ascii number
 000001AA  7F 24					JG		_invalidNum
 000001AC  2C 30					SUB		AL, 48
 000001AE  8A C8					MOV		CL, AL
 000001B0  8B C3					MOV		EAX, EBX
 000001B2  BA 0000000A					MOV		EDX, 10
 000001B7  F7 E2					MUL		EDX
 000001B9  70 15					JO		_invalidNum			; tests for overflow (too high or too low)
 000001BB  03 C1					ADD		EAX, ECX
 000001BD  8B D8					MOV		EBX, EAX			; EBX contains calculated int number
 000001BF  59						POP		ECX
 000001C0  E2 D8					LOOP	_test_string_of_positive_int
						; saves calculated EBX value of POSITIVE int into memory and exits PROC
 000001C2					_save_int:
 000001C2  8B F3					MOV		ESI, EBX		
 000001C4  89 1F					MOV		[EDI], EBX
 000001C6  33 C0					XOR		EAX, EAX
 000001C8  33 DB					XOR		EBX, EBX
 000001CA  33 C9					XOR		ECX, ECX
 000001CC  33 D2					XOR		EDX, EDX
 000001CE  5D						POP		EBP
 000001CF  C3						RET							
						; handles any invalid inputs by the user by printing error message and sending user back to input new string
 000001D0					_invalidNum:
 000001D0  56						PUSH	ESI
 000001D1  8B 75 1C					MOV		ESI, [EBP + 28]
							mDisplayString
 000001D4  60		     1		PUSHAD
 000001D5  8B D6	     1		MOV		EDX, ESI
 000001D7  E8 00000000 E     1		CALL	WriteString
 000001DC  61		     1		POPAD
 000001DD  5E						POP		ESI
 000001DE  E8 00000000 E				CALL	CrLf
 000001E3  59						POP		ECX
 000001E4  E9 FFFFFF75					JMP		_user_input
						; handles if byte contains (+) ASCII
 000001E9					_handle_plus_sign:
 000001E9  59						POP		ECX
 000001EA  E2 AE					LOOP	_test_string_of_positive_int
						; handles if byte contains (-) ASCII
 000001EC					_handle_minus_sign:
 000001EC  E2 00					LOOP	_test_string_of_negative_int
						; same as test_string above but for negative numbers
 000001EE					_test_string_of_negative_int:
 000001EE  51						PUSH	ECX
 000001EF  AC						LODSB
 000001F0  3C 2D					CMP		AL, 45				
 000001F2  74 F8					JE		_handle_minus_sign
 000001F4  3C 2B					CMP		AL, 43				
 000001F6  74 F1					JE		_handle_plus_sign
 000001F8  3C 30					CMP		AL, 48				
 000001FA  7C D4					JL		_invalidNum
 000001FC  3C 39					CMP		AL, 57				
 000001FE  7F D0					JG		_invalidNum
 00000200  2C 30					SUB		AL, 48
 00000202  8A C8					MOV		CL, AL
 00000204  8B C3					MOV		EAX, EBX
 00000206  BA 0000000A					MOV		EDX, 10
 0000020B  F7 E2					MUL		EDX
 0000020D  70 0C					JO		_get_neg_ready			; tests for overflow (too high or too low)
 0000020F  03 C1					ADD		EAX, ECX
 00000211  8B D8					MOV		EBX, EAX			
 00000213  59						POP		ECX
 00000214  E2 D8					LOOP	_test_string_of_negative_int
						; saves calculated EBX value of NEGATIVE int into memory and exits PROC
 00000216					_save_neg_int:
 00000216  F7 DB					NEG		EBX
 00000218  59						POP		ECX
 00000219  EB A7					JMP		_save_int
 0000021B					_get_neg_ready:
 0000021B  59						POP		ECX
 0000021C  EB B2					JMP		_invalidNum
 0000021E			ReadVal	ENDP


				;--------------------------------------------------------------------------------------------------------------------------------
				; Name: WriteVal
				;
				; Description:	Converts a numeric SDWORD value to a string of ASCII digits.  It achieves this by invoking the mDisplayString
				;		macro to print the ASCII representation of the SDWORD value to the console.  
				;
				; Preconditions: mDisplayString macro and all memory offsets needed, ESI points to integer number (numbersArray),
				;		EDI points to number_string.
				;
				; Postconditions: Restores EAX, EBX, ECX, EDX
				;
				; Receives: ESI points to numbers_Array, EDI points to number_string, ECX is the AMOUNT_OF_NUMS
				;			memory OFFSETs: THESE ARE HANDLED IN MAIN
				;
				; Returns: Prints the integer numbers as strings to the console with commas in between the numbers
				;-------------------------------------------------------------------------------------------------------------------------------
 0000021E			WriteVal PROC  
 0000021E  55				PUSH	EBP
 0000021F  8B EC			MOV		EBP, ESP
 00000221  BB 0000000A			MOV		EBX, 10
 00000226  8B 06			MOV		EAX, [ESI]
 00000228  B9 00000000			MOV		ECX, 0
 0000022D  83 F8 00			CMP		EAX, 0
 00000230  7C 18			JL		handl_neg
					; calculates each individual ascii digit and saves them in EDI
 00000232				CalculateString:
 00000232  83 F8 0A				CMP		EAX, 10
 00000235  7C 32				JL		DoneString
 00000237  BA 00000000				MOV		EDX, 0
 0000023C  F7 F3				DIV		EBX
 0000023E  50					PUSH	EAX
 0000023F  83 C2 30				ADD		EDX, 48
 00000242  8B C2				MOV		EAX, EDX
 00000244  FC					CLD
 00000245  AB					STOSD
 00000246  58					POP		EAX
 00000247  41					INC		ECX
 00000248  EB E8				JMP		CalculateString
					; handles (-) ascii value by displaying it before calculating string
 0000024A				handl_neg:
 0000024A  56					PUSH	ESI
 0000024B  68 000002F9 R			PUSH	OFFSET	char_ascii
 00000250  8B 34 24				MOV		ESI, [ESP]		; places the character ascii to display in ESI
 00000253  BA 0000002D				MOV		EDX, 45
 00000258  89 16				MOV		[ESI], EDX
						mDisplayString
 0000025A  60		     1		PUSHAD
 0000025B  8B D6	     1		MOV		EDX, ESI
 0000025D  E8 00000000 E     1		CALL	WriteString
 00000262  61		     1		POPAD
 00000263  5E					POP		ESI				; removes the char_ascii offset
 00000264  5E					POP		ESI
 00000265  F7 D8				NEG		EAX				; turns the value to a positive digit before continuing
 00000267  EB C9				JMP		CalculateString
					; takes previously stored ascii characters and prints them to the console
 00000269				DoneString:
 00000269  83 C0 30				ADD		EAX, 48
 0000026C  89 07				MOV		[EDI], EAX
 0000026E  41					INC		ECX
 0000026F  8B F7				MOV		ESI, EDI
 00000271  BB 00000000				MOV		EBX, 0
 00000276					printString:
 00000276  FD						STD
 00000277  AD						LODSD
 00000278  56						PUSH	ESI
 00000279  83 C6 30					ADD		ESI, 48		; moves ESI to not mess with printing 
 0000027C  89 06					MOV		[ESI], EAX
							mDisplayString
 0000027E  60		     1		PUSHAD
 0000027F  8B D6	     1		MOV		EDX, ESI
 00000281  E8 00000000 E     1		CALL	WriteString
 00000286  61		     1		POPAD
 00000287  5E						POP		ESI
 00000288  E2 EC					LOOP	printString
 0000028A  33 C0			XOR		EAX, EAX
 0000028C  33 DB			XOR		EBX, EBX
 0000028E  33 C9			XOR		ECX, ECX
 00000290  33 D2			XOR		EDX, EDX
 00000292  5D				POP		EBP
 00000293  C3				RET
 00000294			WriteVal ENDP


				;--------------------------------------------------------------------------------------------------------------------------------
				; Name: calculateSum
				; Description:  Calculates and displays the summation value of the numbersArray integers. It also prints the 
				;		summation prompt and calculated value to the console for the user
				;
				; Preconditions: randArray contains sorted integer values
				;
				; Postconditions: Restores EAX, EBX, ECX, EDX.  Saves sum value in sum_calculation
				;
				; Receives: memory OFFSETs:
				;                          [EBP+16] sum_calculation,
				;                          [EBP+12] sum_prompt,
				;                          [EBP+8] numbersArray
				;
				; Returns: prints summation prompt and calculated sum to the user on the console.  Saves sum in var sum_calculation
				;-------------------------------------------------------------------------------------------------------------------------------
 00000294			calculateSum PROC
 00000294  55				PUSH	EBP
 00000295  8B EC			MOV		EBP, ESP
 00000297  8B 75 0C			MOV		ESI, [EBP + 12]
					mDisplayString
 0000029A  60		     1		PUSHAD
 0000029B  8B D6	     1		MOV		EDX, ESI
 0000029D  E8 00000000 E     1		CALL	WriteString
 000002A2  61		     1		POPAD
 000002A3  8B 75 08			MOV ESI, [EBP + 8]
 000002A6  8B 7D 10			MOV	EDI, [EBP + 16]
 000002A9  B8 00000000			MOV	EAX, 0
 000002AE  BB 00000000			MOV	EBX, 0
 000002B3  B9 0000000A			MOV	ECX, AMOUNT_OF_NUMS
					; goes through all integers to calculate the sum
 000002B8				calculationLoop:
 000002B8  8B 1E				MOV	EBX, [ESI]
 000002BA  03 C3				ADD EAX, EBX
 000002BC  83 C6 04				ADD ESI, 4
 000002BF  E2 F7				LOOP calculationLoop
					; Saves the sum, and prints it for the user
 000002C1				endcalc:
 000002C1  89 07				MOV	[EDI], EAX
						; sets up precondition for WriteVal to print the sum
 000002C3  60					PUSHAD
 000002C4  68 000002FD R			PUSH	OFFSET	sum_calculation		
 000002C9  68 000002DC R			PUSH	OFFSET	number_string	
 000002CE  89 06				MOV		[ESI], EAX
 000002D0  8B 3C 24				MOV		EDI, [ESP]
 000002D3  E8 FFFFFF46				CALL	WriteVal
 000002D8  58					POP		EAX					; pops OFFSETS
 000002D9  58					POP		EAX					
 000002DA  61					POPAD
 000002DB  33 C0				XOR		EAX, EAX
 000002DD  33 DB				XOR		EBX, EBX
 000002DF  33 C9				XOR		ECX, ECX
 000002E1  33 D2				XOR		EDX, EDX
 000002E3  5D				POP		EBP
 000002E4  C2 000C			RET		12
 000002E7			calculateSum ENDP


				;--------------------------------------------------------------------------------------------------------------------------------
				; Name: calculateAvg
				; Description:  Calculates and displays the truncated average value of the numbersArray integers. It also prints the 
				;		average prompt and calculated value to the console for the user
				;
				; Preconditions: calculate_sum contains sum of all integer values
				;
				; Postconditions: Restores EAX, EBX, ECX, EDX
				;
				; Receives: memory OFFSETs:
				;                          [EBP+12] avg_prompt
				;                          [EBP+8] sum_calculation
				;
				; Returns: prints average prompt and truncated average to the user on the console.
				;-------------------------------------------------------------------------------------------------------------------------------
 000002E7			calculateAvg PROC
 000002E7  55				PUSH	EBP
 000002E8  8B EC			MOV		EBP, ESP
 000002EA  E8 00000000 E		CALL	CrLf
 000002EF  8B 75 0C			MOV		ESI, [EBP + 12]
					mDisplayString				; displays prompt
 000002F2  60		     1		PUSHAD
 000002F3  8B D6	     1		MOV		EDX, ESI
 000002F5  E8 00000000 E     1		CALL	WriteString
 000002FA  61		     1		POPAD
 000002FB  8B 75 08			MOV		ESI, [EBP + 8]
 000002FE  BB 0000000A			MOV		EBX, AMOUNT_OF_NUMS
 00000303  BA 00000000			MOV		EDX, 0
 00000308  8B 06			MOV		EAX, [ESI]
 0000030A  83 F8 00			CMP		EAX, 0				; handles positive value
 0000030D  7D 08			JGE		avgCalc
 0000030F  F7 D8			NEG		EAX
 00000311  F7 F3			DIV		EBX
 00000313  F7 D8			NEG		EAX
 00000315  EB 02			JMP		finishAvg
 00000317				avgCalc:
 00000317  F7 F3				DIV		EBX
 00000319				finishAvg:
 00000319  60					PUSHAD
 0000031A  68 000002FD R			PUSH	OFFSET	sum_calculation		
 0000031F  68 000002DC R			PUSH	OFFSET	number_string	
 00000324  89 06				MOV		[ESI], EAX
 00000326  8B 3C 24				MOV		EDI, [ESP]
 00000329  E8 FFFFFEF0				CALL	WriteVal
 0000032E  58					POP		EAX					
 0000032F  58					POP		EAX					
 00000330  61					POPAD
 00000331  33 C0				XOR		EAX, EAX
 00000333  33 DB				XOR		EBX, EBX
 00000335  33 C9				XOR		ECX, ECX
 00000337  33 D2				XOR		EDX, EDX
 00000339  5D				POP		EBP
 0000033A  C2 0008			RET		8
 0000033D			calculateAvg ENDP


				;--------------------------------------------------------------------------------------------------------------------------------
				; Name: farewell
				;
				; Description:	Prints Goodbye message to the user
				;
				; Preconditions: none
				;
				; Postconditions: Restores EDX
				;
				; Receives: memory OFFSETs:
				;                          [EBP+8] farewell
				;
				; Returns: Prints statements to the console.
				;-------------------------------------------------------------------------------------------------------------------------------
 0000033D			farewell PROC	
 0000033D  55				PUSH	EBP
 0000033E  8B EC			MOV		EBP, ESP
 00000340  E8 00000000 E		CALL	CrLf
 00000345  8B 55 08			MOV		EDX, [EBP + 8]
 00000348  E8 00000000 E		CALL	WriteString
 0000034D  33 D2			XOR		EDX, EDX
 0000034F  5D				POP		EBP
 00000350  C2 0004			RET		4
 00000353			farewell ENDP


				END main
Microsoft (R) Macro Assembler Version 14.29.30147.0	    06/01/23 14:00:09
MASM Calculat						     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000301 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000353 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 0000015B _TEXT	Length= 000000C3 Public STDCALL
  _user_input  . . . . . . . . .	L Near	 0000015E _TEXT	
  _test_string_of_positive_int .	L Near	 0000019A _TEXT	
  _save_int  . . . . . . . . . .	L Near	 000001C2 _TEXT	
  _invalidNum  . . . . . . . . .	L Near	 000001D0 _TEXT	
  _handle_plus_sign  . . . . . .	L Near	 000001E9 _TEXT	
  _handle_minus_sign . . . . . .	L Near	 000001EC _TEXT	
  _test_string_of_negative_int .	L Near	 000001EE _TEXT	
  _save_neg_int  . . . . . . . .	L Near	 00000216 _TEXT	
  _get_neg_ready . . . . . . . .	L Near	 0000021B _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 0000021E _TEXT	Length= 00000076 Public STDCALL
  CalculateString  . . . . . . .	L Near	 00000232 _TEXT	
  handl_neg  . . . . . . . . . .	L Near	 0000024A _TEXT	
  DoneString . . . . . . . . . .	L Near	 00000269 _TEXT	
  printString  . . . . . . . . .	L Near	 00000276 _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
calculateAvg . . . . . . . . . .	P Near	 000002E7 _TEXT	Length= 00000056 Public STDCALL
  avgCalc  . . . . . . . . . . .	L Near	 00000317 _TEXT	
  finishAvg  . . . . . . . . . .	L Near	 00000319 _TEXT	
calculateSum . . . . . . . . . .	P Near	 00000294 _TEXT	Length= 00000053 Public STDCALL
  calculationLoop  . . . . . . .	L Near	 000002B8 _TEXT	
  endcalc  . . . . . . . . . . .	L Near	 000002C1 _TEXT	
farewell . . . . . . . . . . . .	P Near	 0000033D _TEXT	Length= 00000016 Public STDCALL
introduction . . . . . . . . . .	P Near	 000000F3 _TEXT	Length= 00000068 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000F3 Public STDCALL
  get_10_numbers . . . . . . . .	L Near	 0000004A _TEXT	
  write_10_numbers . . . . . . .	L Near	 00000095 _TEXT	
  next_main  . . . . . . . . . .	L Near	 000000B7 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
AMOUNT_OF_NUMS . . . . . . . . .	Number	 0000000Ah   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
avg_prompt . . . . . . . . . . .	Byte	 000001FF _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
char_ascii . . . . . . . . . . .	DWord	 000002F9 _DATA	
comma_space  . . . . . . . . . .	Byte	 00000231 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
error_prompt . . . . . . . . . .	Byte	 00000165 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
farewell_prompt  . . . . . . . .	Byte	 0000021B _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
input_buffer . . . . . . . . . .	DWord	 00000288 _DATA	
input_prompt . . . . . . . . . .	Byte	 00000146 _DATA	
intro_1_one  . . . . . . . . . .	Byte	 00000053 _DATA	
intro_1_two  . . . . . . . . . .	Byte	 00000063 _DATA	
intro_2  . . . . . . . . . . . .	Byte	 0000007F _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
myName . . . . . . . . . . . . .	Byte	 00000000 _DATA	
number_declaration . . . . . . .	Byte	 000001BE _DATA	
number_int . . . . . . . . . . .	DWord	 000002F5 _DATA	
number_string  . . . . . . . . .	Byte	 000002DC _DATA	
numbersArray . . . . . . . . . .	DWord	 00000234 _DATA	
programTitle . . . . . . . . . .	Byte	 0000001E _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
size_of_input  . . . . . . . . .	DWord	 000002F1 _DATA	
sum_calculation  . . . . . . . .	DWord	 000002FD _DATA	
sum_prompt . . . . . . . . . . .	Byte	 000001E1 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
